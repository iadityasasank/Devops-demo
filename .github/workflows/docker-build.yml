# Name of the workflow that appears in GitHub Actions UI
name: Docker Build and Test

# Define when this workflow will run
on:
  push:
    # Run workflow when code is pushed to master or main branch
    branches: [master, main]
  pull_request:
    # Run workflow when a PR is created against master or main
    branches: [master, main]

# Define the jobs to run
jobs:
  # First job: Run tests
  test:
    # Specify the runner environment
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Specify Python version

      # Step 3: Install system dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update  # Update package lists
          sudo apt-get install -y make  # Install make utility

      # Step 4: Execute tests using make command
      - name: Run tests
        run: make test  # Runs the test target from Makefile

  # Second job: Build and push Docker image
  build:
    # Only run this job after test job succeeds
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2

      # Step 2: Set repository name to lowercase for Docker
      - name: Lowercase the repo name
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Step 3: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}:latest

  # Third job: Deploy using GitHub's infrastructure
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v2
      
      # Step 2: Get repository name in lowercase
      - name: Lowercase the repo name
        run: |
          echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      # Step 3: Create GitHub Deployment
      - name: Create GitHub Deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          initial-status: in_progress
          
      # Step 4: Pull and run container
      - name: Deploy Container
        id: deploy
        run: |
          # Pull the latest image
          docker pull ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}:latest
          
          # Stop and remove existing container if it exists
          docker rm -f app || true
          
          # Run the container
          docker run -d \
            -p 8080:8080 \
            --name app \
            ghcr.io/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}:latest
          
          echo "deployment_url=https://${{ env.REPO_OWNER }}.github.io/${{ env.REPO_NAME }}" >> $GITHUB_OUTPUT
          
      # Step 5: Update deployment status
      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: ${{ steps.deploy.outputs.deployment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}
